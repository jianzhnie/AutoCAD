from __future__ import annotations

from copy import deepcopy
from ipaddress import IPv4Address, IPv6Address
from typing import Any, Dict, List, Optional, Union

from cyberwheel.agents.red.technique import Technique
from cyberwheel.network import Host, Service

# Define a type alias for IP addresses, including the possibility of None
IPAddress = Union[IPv4Address, IPv6Address, None]


class Alert:
    """A class representing an alert generated by actions on a network.

    This class captures information related to network and host-based actions,
    including source and destination hosts, services, techniques, and more.

    ### Generic
    These components are neither network nor host based data components.

    - src_host: the host that an action is performed on. It either creates network traffic or something is done on the host itself.
    - techniques: the technique(s) that caused this alert to be created (made a red action successful). It's probably a stretch for a detector to know what techniques the red agent is using. This is primarily used for determining the probability of the detector noticing the action. Should be filtered out.

    ### Network-based Data Components
    - dst_hosts: the hosts the src_host is communicating with (possibly hosts being attacked)
    - services: the services the hosts are communicating through (possibly services being targeted for an attack)
    - src_ip: the IP of the source host. Also found in src_host, but is here for convenience
    - dst_ips: the IPs of the destination hosts. Also found in each element of dst_hosts, but is here for convenience
    - dst_ports: the ports of the services. Also found in services, but is here for convenience

    ### Host-based Data Components
    These components are related to the host's system itself, like the OS or user. This is rather abstract and unimplemented right now.

    - user: username of the user who executed a command on the host.
    - command: the command/file being executed. Could include things like syscalls and regular executables
    - files: additional files being accessed. I.e log files
    - other_resources: other resources used in an abnormal way that are specifically targeted by an action. I.e. a local database
    - os: the OS of the system
    - os_version: version of the OS
    """

    FIELD_NAMES = {'src_host', 'dst_hosts', 'services'}

    def __init__(
        self,
        src_host: Optional[Host] = None,
        techniques: Optional[List[Technique]] = None,
        dst_hosts: Optional[List[Host]] = None,
        services: Optional[List[Service]] = None,
        user: str = '',
        command: str = '',
        files: Optional[List[Any]] = None,
        other_resources: Optional[Dict[str, Any]] = None,
        os: str = '',
        os_version: str = '',
    ) -> None:
        """Initialize an Alert instance with network and host-based data.

        Attributes:
            src_host (Optional[Host]): The source host where the action originated.
            techniques (List[Technique]): The techniques associated with this alert.
            dst_hosts (List[Host]): The destination hosts communicated with by the source host.
            services (List[Service]): The services used in the communication.
            src_ip (Optional[str]): The IP address of the source host.
            dst_ips (List[str]): The IP addresses of the destination hosts.
            dst_ports (List[int]): The ports of the services used.
            user (str): The user executing the command on the host.
            command (str): The command executed by the user.
            files (List[Any]): Additional files accessed.
            other_resources (Dict[str, Any]): Other resources targeted by the action.
            os (str): The operating system of the host.
            os_version (str): The version of the operating system.
        """
        self.src_host = src_host
        self.techniques = techniques if techniques is not None else []
        self.dst_hosts = dst_hosts if dst_hosts is not None else []
        self.services = services if services is not None else []

        # Convenience attributes
        self.src_ip = self.src_host.mac_address if self.src_host else None
        self.dst_ips = [h.mac_address for h in self.dst_hosts]
        self.dst_ports = [s.port for s in self.services]

        # Host-based data components
        self.user = user
        self.command = command
        self.files = files if files is not None else []
        self.other_resources = other_resources if other_resources is not None else {}
        self.os = os
        self.os_version = os_version

    def add_dst_host(self, host: Host) -> None:
        """Add a destination host to the alert and update dst_ips."""
        self.dst_hosts.append(host)
        self.dst_ips.append(host.mac_address)

    def add_src_host(self, host: Host) -> None:
        """Set the source host for the alert and update src_ip."""
        self.src_host = host
        self.src_ip = host.mac_address

    def add_service(self, service: Service) -> None:
        """Add a service to the alert and update dst_ports."""
        self.services.append(service)
        self.dst_ports.append(service.port)

    def remove_src_host(self) -> None:
        """Remove the source host from the alert."""
        self.src_host = None
        self.src_ip = None

    def remove_dst_host(self, host: Host) -> None:
        """Remove a destination host from the alert and update dst_ips."""
        if host in self.dst_hosts:
            self.dst_hosts.remove(host)
            self.dst_ips.remove(host.mac_address)

    def remove_service(self, service: Service) -> None:
        """Remove a service from the alert and update dst_ports."""
        if service in self.services:
            self.services.remove(service)

    def add_techniques(self, techniques: List[Technique]) -> None:
        """Add one or more techniques to the alert."""
        self.techniques.extend(techniques)

    def to_dict(self) -> Dict[str, Any]:
        """Convert the alert to a dictionary, including only specific
        fields."""
        alert_dict = deepcopy(self.__dict__)
        for key in list(alert_dict.keys()):
            if key not in self.FIELD_NAMES:
                alert_dict.pop(key)
        return alert_dict

    def __eq__(self, other: object) -> bool:
        """Check if two alerts are equal based on src_host, dst_hosts, and
        services."""
        if not isinstance(other, Alert):
            return False

        if self.src_host != other.src_host:
            return False

        if len(self.dst_hosts) != len(other.dst_hosts):
            return False

        if any(host not in other.dst_hosts for host in self.dst_hosts):
            return False

        if len(self.services) != len(other.services):
            return False

        if any(service not in other.services for service in self.services):
            return False

        return True

    def __str__(self) -> str:
        """Return a string representation of the alert."""
        return (f'Alert: src_host={self.src_host}, '
                f'dst_hosts={[str(h) for h in self.dst_hosts]}, '
                f'services={[str(s) for s in self.services]}')
